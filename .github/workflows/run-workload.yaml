name: run-workload
description: Run a workload to create a new modeling job and associated task configs.

# TODO: remove on: push:!
on:
  push:
    branches:
      - gio-runner-migration
  workflow_dispatch:
    inputs:
      state:
        description: 'State to run (default: all)'
      disease:
        description: 'Disease to run (default: all)'
      report_date:
        description: 'Report date (default: today; format: YYYY-MM-DD)'
      reference_dates:
        description: 'Reference dates (default: [8 weeks before, 1 day before] report date; format: YYYY-MM-DD, YYYY-MM-DD)'
      data_container:
        description: 'Data path (default: None)'
      production_date:
        description: 'Production date (default: today; format: YYYY-MM-DD)'
      job_id:
        description: 'Job ID (default: Rt-estimation-<timestamp>-<uuid>)'
      task_exclusions:
        description: 'Task exclusions (state:disease pair - default: None; ex: NY:COVID-19)'
      output_container:
        description: 'Output container in Azure (default: nssp-rt-testing)'
        default: nssp-rt-testing

jobs:
  run-workload:
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Execute workload script
      run: |
        state=${{ inputs.state }} \
        disease=${{ inputs.disease }} \
        reference_dates=${{ inputs.reference_dates }} \
        report_date=${{ inputs.report_date }} \
        data_container=${{ inputs.data_container }} \
        production_date=${{ inputs.production_date }} \
        job_id=${{ inputs.job_id }} \
        task_exclusions=${{ inputs.task_exclusions }} \
        output_container=${{ inputs.output_container }} \
          uv run python pipelines/epinow2/generate_config_local.py

    - name: Get folder name
      id: get-folder-name
      run: |
        child_dir=$(find 'target' -mindepth 1 -maxdepth 1 -type d -print -quit)
        child_name=$(basename "$child_dir")
        echo "target_dir=$child_name" >> $GITHUB_OUTPUT

    - name: Zip folder
      run: |
        cd target && zip -r ../${{ steps.get-folder-name.outputs.target_dir }}.zip ${{ steps.get-folder-name.outputs.target_dir }} && cd ..

    - name: Upload Artifacts
      id: upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-folder-name.outputs.target_dir }}
        path: ${{ steps.get-folder-name.outputs.target_dir }}.zip
        retention-days: 1

    - name: Copy to Azure Blob
      uses: CDCgov/cfa-actions/runner-action@v1.3.0
      with:
        github_app_id: ${{ secrets.CDCENT_ACTOR_APP_ID }}
        github_app_pem: ${{ secrets.CDCENT_ACTOR_APP_PEM }}
        wait_for_completion: true
        print_logs: true
        script: | 
          # Fetch the artifact download URL
          curl -L -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
               -H "Accept: application/vnd.github.v3+json" \
               'https://api.github.com/repos/CDCgov/cfa-config-generator/actions/artifacts/${{ steps.upload-artifacts.outputs.artifact-id }}/zip' -o artifact.zip

          # Unzip the downloaded file
          unzip artifact.zip

          # Unzip artifact
          unzip ${{ steps.get-folder-name.outputs.target_dir }}.zip

          # checking contents of out directory
          ls -lah ${{ steps.get-folder-name.outputs.target_dir }}

          echo "Login to Azure with NNH Service Principal"
          az login --service-principal \
            --username ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientId }} \
            --password ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientSecret }} \
            --tenant ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).tenantId }} 

