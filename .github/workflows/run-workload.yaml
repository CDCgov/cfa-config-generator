name: run-workload
description: Run a workload to create a new modeling job and associated task configs.

on:
  push: #TODO: remove this!
    branches:
      - gio-runner-migration
  workflow_dispatch:
    inputs:
      state:
        description: 'State to run (default: all)'
      disease:
        description: 'Disease to run (default: all)'
      report_date:
        description: 'Report date (default: today; format: YYYY-MM-DD)'
      reference_dates:
        description: 'Reference dates (default: [8 weeks before, 1 day before] report date; format: YYYY-MM-DD, YYYY-MM-DD)'
      data_container:
        description: 'Data path (default: None)'
      production_date:
        description: 'Production date (default: today; format: YYYY-MM-DD)'
      job_id:
        description: 'Job ID (default: Rt-estimation-<timestamp>-<uuid>)'
      task_exclusions:
        description: 'Task exclusions (state:disease pair - default: None; ex: NY:COVID-19)'
      output_container:
        description: 'Output container in Azure (default: nssp-rt-testing)'

env:
  # Together, these form: cfaprdbatchcr.azurecr.io/cfa-config-generator
  REGISTRY: cfaprdbatchcr.azurecr.io/
  IMAGE_NAME: cfa-config-generator
  MAIN_BRANCH_NAME: main

jobs:
  build-and-push:
    uses: ./.github/workflows/build-and-push.yaml
    secrets: inherit

  run-workload:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: branch-name

      - name: Figure out tag (either latest if it is main or the branch name)
        shell: bash
        id: image-tag
        run: |
          if [ "${{ steps.branch-name.outputs.branch }}" = "${{ env.MAIN_BRANCH_NAME }}" ]; then
            echo "tag=${{ env.MAIN_BRANCH_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker Image String
        id: image-name
        run: echo "image_name=${{ env.REGISTRY }}${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}" >> $GITHUB_OUTPUT

      # This OIDC code is straight from the github docs: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers#requesting-the-jwt-using-environment-variables
      - uses: actions/github-script@v7
        id: script
        timeout-minutes: 10
        with:
          debug: true
          script: |
            const token = process.env['ACTIONS_RUNTIME_TOKEN']
            const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
            core.setOutput('TOKEN', token.trim())
            core.setOutput('IDTOKENURL', runtimeUrl.trim())
      - run: |
          IDTOKEN=$(curl -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
          echo $IDTOKEN
          jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
                  echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
              fi
          }
          jwtd $IDTOKEN
          echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
        id: tokenid

      - name: Trigger Container App Job
        uses: CDCgov/cfa-actions/runner-action@v1.3.0
        with:
          github_app_id: ${{ secrets.CDCENT_ACTOR_APP_ID }}
          github_app_pem: ${{ secrets.CDCENT_ACTOR_APP_PEM }}
          wait_for_completion: true
          print_logs: true
          script: |
            echo "Logging into Azure CLI"
            az login --service-principal \
              --username ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).clientId }} \
              --tenant ${{ fromJSON(secrets.EDAV_CFA_PREDICT_NNHT_SP).tenantId }} \
              --federated-token ${{ steps.tokenid.outputs.idToken }}

            JOB_NAME='cfa-config-generator'
            RESOURCE_GROUP='ext-edav-cfa-prd'
            TEMPLATE='job-template.yaml'

            echo "Getting Existing Job Template"
            az containerapp job show \
              --name "$JOB_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "properties.template" \
              --output yaml > $TEMPLATE

              echo "Updating Job Template"
              yq -i '.containers[0].image = "${{ steps.image-name.outputs.image_name }}"' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "state", "value": "${{ inputs.state }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "disease", "value": "${{ inputs.disease }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "reference_dates", "value": "${{ inputs.reference_dates }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "report_date", "value": "${{ inputs.report_date }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "data_container", "value": "${{ inputs.data_container }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "production_date", "value": "${{ inputs.production_date }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "job_id", "value": "${{ inputs.job_id }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "task_exclusions", "value": "${{ inputs.task_exclusions }}" }]' $TEMPLATE
              yq -i '.containers[0].env += [{ "name": "output_container", "value": "${{ inputs.output_container }}" }]' $TEMPLATE
              yq -i '.containers[0].command = [ "uv", "run", "python", "pipelines/epinow2/generate_config.py" ]' $TEMPLATE
              cat $TEMPLATE

              echo "Starting Job"
              az containerapp job start \
              --resource-group  "$RESOURCE_GROUP" \
              --name "$JOB_NAME" \
              --yaml $TEMPLATE && echo "Started Container App Job!"
              # throw error if job fails
              if [ $? -ne 0 ]; then
                echo "Failed to start Container App Job!"
                exit 1
              fi
